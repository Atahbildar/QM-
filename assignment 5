import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp
from scipy import integrate
import pandas as pd
from sgcipy import special
import math as m


def numerov(x_min,x_max,N,u_0,del_e,n):
    h = (x_max-x_min)/(N+1)
    alpha = lambda x: 2*(n + (1/2) + del_e - (1/2)*(x)**2)
    C = []
    U = np.zeros((N))
    X = []
    U[0] = u_0
    U[1] = 1+(h**2)/2+(h**4)/24
    for i in range(N):
        x = x_min + i*h
        X.append(x)
        C_i = 1+(h**2/12)*alpha(x)
        C.append(C_i) 
    for i in range(1,N-1):
        U[i+1] = (1/C[i+1])*((12-10*C[i])*U[i]-C[i-1]*U[i-1])
    return U,X

def analytic(x,n):
    p = special.hermite(n, monic=True)
    U = (1/np.sqrt(2**n)*m.factorial(n))*(1/np.pi**(1/4))*(np.exp((-(x**2))/2))*p(x)
    a = integrate.simpson(U**2,x)
    u = U/np.sqrt(a)
    return u

def add(U,X):
    U_ = np.delete(U,len(U)-1)
    U_result = []
    U_result = list(U_)
    for i in X:
        U_result.append(i)
    return U_result

def parity(x_min,x_max,N,u_0,del_e,n):
    U_,X = numerov(x_min,x_max,N,u_0,del_e,n)
    a = integrate.simpson(U_**2,X)
    U = U_/np.sqrt(a)
    u = U[::-1]
    x = X[::-1]
    U_array = []
    X_array = []
    if (n%2)==0:
       X_array = add(x,X)
       U_array = add(u,U)
    elif n%2!=0:
       X_array = add(np.multiply(-1,x),X)
       U_array = add(np.multiply(-1,u),U)
    return U_array,X_array
print("(a)")
def plot(x_min,x_max,n,del_e):
   X = np.linspace(x_min,x_max,199)
   if (n%2)==0:
      P,x = parity(0,x_max,100,1,del_e,n)
   else:
      P,x = parity(0,x_max,100,0,del_e,n)
   return P,X

print("Normalized,n = 0")
for i in range(1,5):
    P,X = plot(-1,1,0,10**(-2*i))
    x = np.linspace(0,1,200)
    x1 = np.linspace(-1,0,200)
    Ana = analytic(x,0)
    Ana1 = analytic(x1,0)
    plt.plot(X,np.multiply(1,P),label= "calculated",c = "g")
    plt.scatter(x,Ana,label="analytic",c = "m")
    plt.scatter(x1,Ana1,c = "m")
    plt.grid()
    plt.xlabel("x range")
    plt.ylabel("u_0(x)")
    plt.title(10**(-2*i))
    plt.legend()
    plt.show()


P,X = plot(-2,2,1,10**(-6))
x = np.linspace(0,2,200)
x1 = np.linspace(-2,0,200)
Ana = analytic(x,1)
Ana1 = analytic(x1,1)
plt.plot(X,np.multiply(1,P),label= "calculated",c = "g")
plt.scatter(x,Ana,label="analytic",c = "m")
plt.scatter(x1,Ana1,c = "m")
plt.grid()
plt.xlabel("x range")
plt.ylabel("u_0(x)")
plt.title("Normalized,n = 1")
plt.legend()
plt.show()



P,X = plot(-3,3,2,10**(-6))
x = np.linspace(0,3,200)
x1 = np.linspace(-3,0,200)
Ana = analytic(x,2)
Ana1 = analytic(x1,2)
plt.plot(X,np.multiply(-1,P),label= "calculated",c = "g")
plt.scatter(x,Ana,label="analytic",c = "m")
plt.scatter(x1,Ana1,c = "m")
plt.grid()
plt.xlabel("x range")
plt.ylabel("u_0(x)")
plt.title("Normalized,n = 2")
plt.legend()
plt.show()

P,X = plot(-4,4,3,10**(-6))
x = np.linspace(0,4,200)
x1 = np.linspace(-4,0,200)
Ana = analytic(x,3)
Ana1 = analytic(x1,3)
plt.plot(X,np.multiply(-1,P),label= "calculated",c = "g")
plt.scatter(x,Ana,label="analytic",c = "m")
plt.scatter(x1,Ana1,c = "m")
plt.grid()
plt.xlabel("x range")
plt.ylabel("u_0(x)")
plt.title("Normalized,n = 3")
plt.legend()
plt.show()


print("(b)")
P,X = plot(-1,1,0,10**(-6))
x = np.linspace(0,1,200)
x1 = np.linspace(-1,0,200)
Ana = analytic(x,0)
Ana1 = analytic(x1,0)
plt.plot(X,np.multiply(1,P)**2,label= "calculated",c = "g")
plt.scatter(x,Ana**2,label="analytic",c = "m")
plt.scatter(x1,Ana1**2,c = "m")
plt.grid()
plt.xlabel("x range")
plt.ylabel("u_0(x)")
plt.title("Probability density,n = 0")
plt.legend()
plt.show()

P,X = plot(-2,2,1,10**(-6))
x = np.linspace(0,2,200)
x1 = np.linspace(-2,0,200)
Ana = analytic(x,1)
Ana1 = analytic(x1,1)
plt.plot(X,np.multiply(1,P)**2,label= "calculated",c = "g")
plt.scatter(x,Ana**2,label="analytic",c = "m")
plt.scatter(x1,Ana1**2,c = "m")
plt.grid()
plt.xlabel("x range")
plt.ylabel("u_0(x)")
plt.title("Probability density,n = 1")
plt.legend()
plt.show()



P,X = plot(-3,3,2,10**(-6))
x = np.linspace(0,3,200)
x1 = np.linspace(-3,0,200)
Ana = analytic(x,2)
Ana1 = analytic(x1,2)
plt.plot(X,np.multiply(-1,P)**2,label= "calculated",c = "g")
plt.scatter(x,Ana**2,label="analytic",c = "m")
plt.scatter(x1,Ana1**2,c = "m")
plt.grid()
plt.xlabel("x range")
plt.ylabel("u_0(x)")
plt.title("Probability density,n = 2")
plt.legend()
plt.show()

P,X = plot(-4,4,3,10**(-6))
x = np.linspace(0,4,200)
x1 = np.linspace(-4,0,200)
Ana = analytic(x,3)
Ana1 = analytic(x1,3)
plt.plot(X,np.multiply(-1,P)**2,label= "calculated",c = "g")
plt.scatter(x,Ana**2,label="analytic",c = "m")
plt.scatter(x1,Ana1**2,c = "m")
plt.grid()
plt.xlabel("x range")
plt.ylabel("u_0(x)")
plt.title("Probability density,n = 3")
plt.legend()
plt.show()

print("(c)")

def enrgy(n):
    h_bar = 6.023*10**(-34)
    w = 5.5*10**(14)
    e = 1.6*10**(-19)
    E = (n+(1/2))*((h_bar*w)/e)
    return E

Energy = []
for i in range(5):
    E = enrgy(i)
    Energy.append(E)


df = pd.DataFrame({"Energy analytically(eV)":Energy})
print(df)

#probability of finding electron  in the classically forbidden region
U,X = numerov(0,1,100,1,10**(-6),0)
a = integrate.simpson(U**2,X)
print("Probability of finding electron in ground state is  =",a)
